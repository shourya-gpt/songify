import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Assertions;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;


public class BackendDeveloperTests {

  /**
   * Tests if Backend.readData(String filename) throws an IOException when passed the name of a file
   * which doesn't exist.
   */
  @Test
  public void test1() {
    IterableSortedCollection<SongInterface> tree = new ISCPlaceholder<SongInterface>();
    BackendInterface backend = new Backend(tree);

    try {
      backend.readData("this file doesn't exist");
      Assertions.fail();
    } catch (IOException e) {

    }

  }

  /**
   * Tests if the Backend.getRange(int low, int high) gives a correct list of titles sorted by BPM
   * withing the range provided.
   */
  @Test
  public void test2() {

    IterableSortedCollection<SongInterface> tree = new ISCPlaceholder<SongInterface>();
    BackendInterface backend = new Backend(tree);

    try {
      backend.readData(
          "songs.csv");
    }
    // for compiler satisfaction
    catch (IOException e) {

    }

    List<String> result = backend.getRange(60, 80);
    List<String> expected = new ArrayList<String>();

    String[] toAdd = new String[] {"1+1", "Baby", "Praying", "Jar of Hearts", "Let Her Go",
        "Tee Shirt - Soundtrack Version", "I Knew You Were Trouble.", "Mirrors - Radio Edit",
        "Steal My Girl", "Ferrari", "American Oxygen", "Thinking out Loud", "Dear Future Husband",
        "Ghosttown", "Castle Walls (feat. Christina Aguilera)", "Cheers (Drink To That)",
        "Castle Walls (feat. Christina Aguilera)", "We Can't Stop", "Come & Get It",
        "See You Again (feat. Charlie Puth)"};

    for (int i = 0; i < toAdd.length; i++) {
      expected.add(toAdd[i]);
    }

    if (result.size() != expected.size()) {
      Assertions.fail();
    }

    for (int j = 0; j < result.size(); j++) {
      if (!result.get(j).equals(expected.get(j))) {
        Assertions.fail();
      }
    }



  }

  /**
   * Tests if 1. Backend.filterOldSongs(maxYear) returns an empty list if Backend.getRange(int low,
   * int high) has't previously been called. 2. Backend.filterOldSongs(maxYear) appropriately
   * filters the returned list of Songs from Backend.getRange(int low, int high).
   */
  @Test
  public void test3() {
    IterableSortedCollection<SongInterface> tree = new ISCPlaceholder<SongInterface>();
    BackendInterface backend = new Backend(tree);

    try {
      backend.readData(
          "songs.csv");
    }
    // for compiler satisfaction
    catch (IOException e) {

    }

    // Test 1, as mentioned in the header comment
    List<String> result = backend.filterOldSongs(2015);

    if (result.size() != 0) {
      Assertions.fail();
    }

    // Test 2, as metioned in the header comment
    List<String> getRange = backend.getRange(60, 80);
    List<String> filterOld = backend.filterOldSongs(2013);

    List<String> expected = new ArrayList<String>();

    String[] toAdd = new String[] {"1+1", "Baby", "Jar of Hearts", "I Knew You Were Trouble.",
        "Mirrors - Radio Edit", "Castle Walls (feat. Christina Aguilera)", "Cheers (Drink To That)",
        "Castle Walls (feat. Christina Aguilera)", "We Can't Stop", "Come & Get It"};

    for (int i = 0; i < toAdd.length; i++) {
      expected.add(toAdd[i]);
    }

    if (filterOld.size() != expected.size()) {
      Assertions.fail();
    }

    for (int j = 0; j < filterOld.size(); j++) {
      if (!filterOld.get(j).equals(expected.get(j))) {
        Assertions.fail();
      }
    }
  }

  /**
   * Tests if 1. Backend.fiveMostDanceable() throws an exception if Backend.getRange(int low, int
   * high) hasn't been called previously 2. Backend.fiveMostDanceable() returns the correct 5 most
   * danceable songs in increasing order of danceability if both getRange(int low, int high) and
   * filterOldSongs(maxYear) have been called earlier
   */
  @Test
  public void test4() {
    IterableSortedCollection<SongInterface> tree = new ISCPlaceholder<SongInterface>();
    BackendInterface backend = new Backend(tree);

    try {
      backend.readData(
          "songs.csv");
    }
    // for compiler satisfaction
    catch (IOException e) {

    }

    List<String> getRange = backend.getRange(60, 80);

    List<String> filterOldSongs = backend.filterOldSongs(2013);
    //
    List<String> fiveMostDanceable = backend.fiveMostDanceable();

    List<String> expected = new ArrayList<String>();

    String[] toAdd = new String[] {"58: Baby", "58: I Knew You Were Trouble.", "61: We Can't Stop",
        "62: Cheers (Drink To That)", "73: Mirrors - Radio Edit"};

    for (int i = 0; i < toAdd.length; i++) {
      expected.add(toAdd[i]);
    }

    if (fiveMostDanceable.size() != expected.size()) {
      Assertions.fail();
    }

    for (int j = 0; j < fiveMostDanceable.size(); j++) {
      if (!fiveMostDanceable.get(j).equals(expected.get(j))) {
        Assertions.fail();
      }
    }

  }

  /**
   * Tests if Backend.fiveMostDanceable() returns a list which contains less than 5 titles when the
   * combination of getRange(int low, int high) and filterOldSongs() being applied results in a list
   * of Song titles which is less than 5 elements long.
   */
  @Test
  public void test5() {
    IterableSortedCollection<SongInterface> tree = new ISCPlaceholder<SongInterface>();
    BackendInterface backend = new Backend(tree);

    try {
      backend.readData(
          "songs.csv");
    }
    // for compiler satisfaction
    catch (IOException e) {

    }

    List<String> getRange = backend.getRange(60, 80);

    List<String> filterOldSongs = backend.filterOldSongs(2010);
    //
    List<String> fiveMostDanceable = backend.fiveMostDanceable();
    
    List<String> expected = new ArrayList<String>();

    String[] toAdd = new String[] {"45: Baby", "73: Castle Walls (feat. Christina Aguilera)"};

    for (int i = 0; i < toAdd.length; i++) {
      expected.add(toAdd[i]);
    }

    if (fiveMostDanceable.size() != expected.size()) {
      Assertions.fail();
    }

    for (int j = 0; j < fiveMostDanceable.size(); j++) {
      if (!fiveMostDanceable.get(j).equals(expected.get(j))) {
        Assertions.fail();
      }
    }
  }

}
